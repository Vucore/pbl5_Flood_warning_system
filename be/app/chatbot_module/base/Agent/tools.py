from langchain_core.prompts import PromptTemplate
from langchain_core.runnables import RunnableSequence
from langchain_core.output_parsers import StrOutputParser
from langchain.tools import tool
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from ....data_module.database.db import get_all_users_from_db
from ..model_setup import load_model_Llama3
from datetime import datetime
import smtplib

GMAIL_USER = 'emsimv10@gmail.com'
GMAIL_PASS = 'vrlinivaocehbnzh'      # ‚Üê App password t·ª´ Google

# Vi·∫øt mail
def generate_email(username, address, date):
    llm = load_model_Llama3(temperature=0.1)
    prompt = PromptTemplate(
        input_variables=["username", "address", "date"],
        template=(
            "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI. B·∫°n s·∫Ω ƒë·∫°i di·ªán cho `H·ªá th·ªëng g·ª≠i mail t·ª± ƒë·ªông` ƒë·ªÉ vi·∫øt email chuy√™n nghi·ªáp b·∫±ng ti·∫øng Vi·ªát\n"
            "N·ªôi dung gmail l√† c·∫£nh b√°o l≈© l·ª•t ƒë·∫øn ng∆∞·ªùi nh·∫≠n\n"
            "Th√¥ng tin ng∆∞·ªùi nh·∫≠n:\n"
            "- T√™n: {username}\n"
            "- ƒê·ªãa ch·ªâ: {address}\n"
            "- Th·ªùi ƒëi·ªÉm hi·ªán t·∫°i: {date}\n\n"
            "H√£y vi·∫øt m·ªôt email ho√†n ch·ªânh, n·ªôi dung r√µ r√†ng, gi·ªçng vƒÉn ph√π h·ª£p b·∫±ng ti·∫øng Vi·ªát ch·ªâ tr·∫£ v·ªÅ n·ªôi dung email m√† b·∫°n vi·∫øt, kh√¥ng th√™m b·∫•t k·ª≥ vƒÉn b·∫£n n√†o kh√°c.\n\n"
        )
    )
    chain: RunnableSequence = prompt | llm
    return chain.invoke({
        "username": username,
        "address": address,
        "date" : date
    })

@tool
def generate_email_tool(username, address, date):
    """Vi·∫øt email ho√†n ch·ªânh d·ª±a tr√™n h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng."""
    email_body = generate_email(username, address, date)
    return email_body

# G·ª≠i mail
def send_email(body, to_email):
    try:
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
            server.login(GMAIL_USER, GMAIL_PASS)

            msg = MIMEMultipart()
            msg["From"] = GMAIL_USER
            msg["To"] = to_email
            msg["Subject"] = "üì¨Th∆∞ g·ª≠i t·ª´ h·ªá th·ªëng t·ª± ƒë·ªông c·∫£nh b√°o l≈© l·ª•t"
            msg.attach(MIMEText(body, "plain"))

            server.send_message(msg)
            print(f"‚úÖ ƒê√£ g·ª≠i email ƒë·∫øn {to_email}")

    except Exception as e:
        print("‚ùå G·ª≠i email th·∫•t b·∫°i:", str(e))


@tool
def send_email_tool(to_email: str, body: str) -> str:
    """G·ª≠i email ƒë·∫øn m·ªôt ho·∫∑c nhi·ªÅu ƒë·ªãa ch·ªâ v·ªõi n·ªôi dung c·ª• th·ªÉ."""
    send_email(body, to_email)


def get_user():
    result = get_all_users_from_db("storage/users.db")
    if result['success']:
        return [
            {
                "username": user["username"],
                "email": user["email"],
                "phone": user["phone"],
                "address": user["address"]
            }
            for user in result["users"]
        ]
    else:
        print("L·ªói khi l·∫•y d·ªØ li·ªáu:", result["message"])
        return []


def adaptive_approach(query: str):
    # Prompt ph√¢n lo·∫°i
    llm = load_model_Llama3(temperature=0.1)
    query_classifier_prompt = PromptTemplate.from_template("""
    Ph√¢n lo·∫°i c√¢u h·ªèi sau th√†nh 1 trong 3 lo·∫°i:
    - "chat" n·∫øu l√† tr√≤ chuy·ªán ho·∫∑c ki·∫øn th·ª©c ph·ªï th√¥ng
    - "simple" n·∫øu l√† c√¢u h·ªèi li√™n quan ƒë·∫øn v·∫•n ƒë·ªÅ l≈© l·ª•t, thi√™n tai, gi·∫£i ph√°p ·ª©ng ph√≥, h·∫≠u qu·∫£ c·ªßa l≈© l·ª•t,.. c·∫ßn truy xu·∫•t th√¥ng tin trong t√†i li·ªáu
    - "call" n·∫øu c√¢u c√≥ √Ω nghƒ©a nh∆∞ mu·ªën g·ª≠i c·∫£nh b√°o, g·ª≠i email, g·ª≠i th∆∞,... ƒë·∫øn ng∆∞·ªùi d√πng 

    C√¢u h·ªèi: {query}
    Lo·∫°i c√¢u h·ªèi (ch·ªâ tr·∫£ v·ªÅ: chat, simple, call):
    """)

    chain = RunnableSequence(
        query_classifier_prompt | llm | StrOutputParser()
    )
    return chain.invoke({
        "query": query,
    })

@tool
def query_classifier(query: str):
    """Ph√¢n lo·∫°i c√¢u h·ªèi ng∆∞·ªùi d√πng"""
    question_type = adaptive_approach(query)
    return question_type

def get_current_datetime():
    """L·∫•y ng√†y v√† gi·ªù hi·ªán t·∫°i"""
    current_datetime = datetime.now()
    return current_datetime.strftime("%Y-%m-%d %H:%M:%S")